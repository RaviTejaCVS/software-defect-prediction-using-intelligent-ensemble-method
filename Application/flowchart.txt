Notebook
---------

1. Importing the packages
2. Exploring the dataset using scipy and converting to dataframe for analysis
	- CM1
	- JM1
	- MC2
	- MW1
	- PC1
	- PC3
	- PC4
3. Data Processing
	- Removing Duplicate Data
	- Drop Cleaning  
	- Label Encoding
4. Feature Selection 
	- Selecting the X and y  Data
5. Oversampling the data using SMOTE
6. Feature Selection using PSO(jf)
7. Appending Selected features to train and validation and split into x_train and x-test
8. Building the model for all data
	- Random Forest
	- SVM
	- Naive Bayes
	- MLP
	- Adaptive Voting Classifier (RF + SVM + NB + MLP)
	- Stacking Classifier (DT + RF with LightGBM)
9. Training and Building the model
10. Comparing the models with accuracy, precision, recall, f1score, AUC, Specificity and Sensitivity
11. Comparison graph are generated with score of all models.

FrontEnd
--------

12. Frontend is developed with help of Flask Framework, along with Registration and Login setup with support of Sqlite3DB
13. For the frontend we have used two dataset (CM1 and PC4) for predicting defective of software since it only gives better accuracy score
14. User gives input as Feature Values 
15. The given input is preprocessed for prediction
16. Trained model is used for prediction
	- separately for the each dataset
17. Final outcome is displayed through frontend


Extension
----------
In the base paper the author mentioned to use different dataset for analysis software defect, with SMOTE oversampling and PSO based Feature Selection,
analysis with ML models like RF, SVM, Naive Bayes, MLP and Ensemble of all models(Adaptive Voting) as Proposed model, and got 86.5%-CM1, 66%-JM1, 73.5%-MC2
801%-MW1, 87%-PC1, 87.5%-PC3 and 90.4%-PC4
As an extension we applied an ensemble method  combining the predictions of multiple individual models to produce a more robust and accurate final prediction. 
However, we can further enhance the performance by exploring other ensemble techniques such as Stacking Classifier (DT + RF with LightGBM ) 
which got 92.4%, 83.6%, 73.5%, 89.7%, 92.2%, 92.4%,93.5% for CM1, JM1, MC2,MW1, PC1, PC3 and PC4 respectively,
As an extension we can build the front end using the flask framework for user testing and with user authentication.
